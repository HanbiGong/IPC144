///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #4
Full Name  : Hanbi Gong
Student ID#: 111932224

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////


1. With the completion of this workshop, you must have begun to appreciate why code formatting is important. Explain how you made your code – especially the iteration and selection logic parts – easy to read and maintain.
-> 
The way that I solved workshop #4 was by using a 'loop statement'. For example, there were different situations with various fruits and quantities needed. So, the loop function helped get repetitive results. I also used 'if-else' statements inside the loop to figure out how the quantity of fruits changed. To compare the kinds of fruits and how many there were, I used integer values.

2.Nested logic is an important feature of programming in any language. Identify and briefly discuss the biggest impact on how this workshop could be coded if nesting were not possible.
->
The nested logic helps organize complicated code in a better way and is useful for making future changes. The main benefit of nested logic is that it connects different parts of the code together. Because of this, it reduces the time needed for repeatedly choosing logic, making the code well-organized. Without nested logic, the code would become long due to many separate logics, making it hard to maintain

3.Consider the following scenario: you are programming logic that requires a user to input a value between 1 and 5, and for each value within that range, you had to perform something unique. You would have to apply selection to validate the entered values so you can implement the given logic for a specific entered range value. Explain why is it inefficient to achieve this using a series of “if” optional path constructs instead of the preferred “if/else if...” alternative path logic?
->
If only "if" is used, it is inefficient because the values between 1 and 5 must be inserted directly.
If I use only if,

do
{
printf (“Enter numer: “)
scanf(“%d”, %number);

if (input == 1) 
{
printf(“There is a number of %d pencils on the desk);
}
} while (number != 1)
.
.
.
I have to write down the value one by one like this. But if I use else if,

do
{
printf (“Enter numer: “)
scanf(“%d”, %number);

if (input == 1) 
{
printf(“There is a number of %d pencils on the destk);
}
else if (number == 2 )
{
printf(“There is a number of %d pencils on the desk);
}
.
.
.
it can all be written in the else if. Therefore, it is much more efficient to use else if.